package operator.bit;

public class BitOperator {

	public static void main(String[] args) {
		
		//비트연산자 [128 64 32 16 8 4 2 1]
		//0과 1의 값을 가질 수 있는 가장 작은단위
		
		//&(AND) : 양쪽 다 1이어야 1
		System.out.println("==[AND]============");
		System.out.println(" 3 & 9 = " + (3 & 9));
		//3 (0 0 0 0 0 0 1 1)
		//9 (0 0 0 0 1 0 0 1)
		//& (0 0 0 0 0 0 0 1) = 1
		System.out.println(" 5 & 23 = " + (5 & 23));
		//5  (0 0 0 0 0 1 0 1)
		//23 (0 0 0 1 0 1 1 1)
		//&  (0 0 0 0 0 1 0 1) = 5
		
		//|(OR) : 1이 하나라도 있으면 1
		System.out.println("==[OR]=============");
		System.out.println(" 3 | 9 = " + (3 | 9));
		//3 (0 0 0 0 0 0 1 1)
		//9 (0 0 0 0 1 0 0 1)
		//| (0 0 0 0 1 0 1 1) = 11
		System.out.println("13 | 7 = " + (13 | 7));
		//13 (0 0 0 0 1 1 0 1)
		//7  (0 0 0 0 0 1 1 1)
		//|  (0 0 0 0 1 1 1 1) = 15
		
		//^(XOR) : 양쪽의 값이 다르면 1, 같으면 0
		System.out.println("==[XOR]============");
		System.out.println("3 ^ 9 = " + (3 ^ 9));
		//3 (0 0 0 0 0 0 1 1)
		//9 (0 0 0 0 1 0 0 1)
		//^ (0 0 0 0 1 0 1 0) = 10
		System.out.println("17 ^ 5 = " + (17 ^ 5));
		//17 (0 0 0 1 0 0 0 1)
		//5  (0 0 0 0 0 1 0 1)
		//^  (0 0 0 1 0 1 0 0) = 20
		
		//~(NOT) : 반대값으로 바꿈 : 값 + 1 * -1 의 값이 나옴
		System.out.println("==[NOT]============");
		System.out.println("~ 9 = " + (~ 9));
		//9 (0 0 0 0 1 0 0 1)
		//~ (1 1 1 1 0 1 1 0) = -10
		System.out.println("~ 37 = " + (~ 37));
		//9 (0 0 1 0 0 1 0 1)
		//~ (1 1 0 1 0 0 1 0) = -38
		System.out.println("~ -15 = " + (~ -15));
		//15 (0 0 0 0 1 1 1 1)
		//~  (1 1 1 1 0 0 0 0) = 14
		
		//Shift : 연산자를 쓴 방향의 지정한 숫자만큼 이동한다
		
		//<<(leftShift)
		System.out.println("==[leftShift]======");
		//<<이동 한 숫자만큼의 비트를 곱함 (1이동하면 * 2, 2이동하면 *4, 5이동하면 * 32, 8이동하면 *256 등등)
		System.out.println("9 << 2 = " + (9 << 2));
		//9   (0 0 0 0 1 0 0 1)
		//<<2 (0 0 1 0 0 1 0 0) = 36
		System.out.println("2 << 8 = " + (2 << 8));
		//2   (0 0 0 0 0 0 0 0 1 0)
		//<<8 (0 1 0 0 0 0 0 0 0 0) = 512	
		
		//>>(rightShift)
		System.out.println("==[rightShift]=====");
		//>>이동한 숫자만큼의 비트를 나누고 소숫점은 버림(1이동하면 / 2, 5이동하면 /32 등)
		System.out.println("9 >> 1 = " + (9 >> 1));
		//9   (0 0 0 0 1 0 0 1)
		//>>2 (0 0 0 0 0 1 0 0) = 4
		System.out.println("9 >> 3 = " + (9 >> 3));
		//9   (0 0 0 0 1 0 0 1)
		//>>3 (0 0 0 0 0 0 0 1) = 1
		
	}

}
